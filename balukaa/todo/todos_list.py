""" Формирование списка задач для приложения "Список дел"

Используем модель TodoEntry, но экземляры формируем только в памяти, не записывая в базу.
Сделано так, поскольку база не передается через github, значит обмен задачами не возможен.
Кроме того, редактировать текстовый файл просто и удобно.
"""
from .models import TodoEntry

t = TodoEntry()
t.task = 'Согласование,\n/*техзадание этапа 1//* /%Счета, Проводки//%'
t.date_range = 'янв-фев 2021'
t.description = '''
1) Обсуждение целей проекта;
2) выбор технологии;
3) согласование техзадания 1 этапа;
4) выбор имени-образа проекта
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = '-'
t.creator = 'Burcador,\nShaj'
todos = [t]
t = TodoEntry()

t.task = 'Приложение /$Ledger//$'
t.date_range = 'мар-апр 2021'
t.description = '''
/*Созданы://*
1) справочник: /%План счетов//%;
2) журнал: /%Журнал проводок//%;
3) отчеты: /%"Карточка счета"//%, /%"Движение по журналу проводок"//%;
4) заполнитель базы тестовыми данными;
5) тесты
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = '-'
t.creator = 'Shaj'
todos.append(t)
t = TodoEntry()

t.task = 'Рефакторинг кода'
t.date_range = 'май 2021'
t.description = '''
1) Рефакторинг кода всего проекта, приведение к единообразию: /$urls, models, views, templates//$.
2) Выработка единого стиля навигации, шаблонов.
3) Изменение имени приложения с /$userapp//$ на /$registration//$.
4) Выделение видов моделей: справочники - /$books//$, журналы - /$journals//$ и отчеты - /$reports//$.
5) Проработка полного цикла /$CRUD//$ по /%Плану счетов//% и /%Журналу проводок//%: создание, просмотр, изменение, удаление.
6) Добавлен отчет /%Баланс//$
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = '''
Изменений много, лучше удалить базу и миграции и запустить их заново.
Тесты не перерабатывал.
'''
t.creator = 'Burcador'
todos.append(t)
t = TodoEntry()

t.task = 'Экспериментальное приложение /$Todo//$'
t.date_range = '31.05.2021'
t.description = '''
Сделать приложение для удобного описания задач прямо в проекте (на замену задачам /$Redmine//$).

Задачи беруться из списка, который пока находится прямо во вьюшке приложения, а не из модели базы.
Поскольку рабочая база в отличии от файлов через /$github//$ не передается.

/*Может быть://*
Потом сделаем иначе, например:
1) Использовать рабочую базу данных через созданную модель.
Данные при записи-изменении сериализовать в файл и настроить возможность загружать из файла.
2) Настроить вторую базу данных sqlite, чисто для нужд разработки.

/*Может быть - 2://*
Из этого будет польза и для самой программы в конечном виде.
Пользователю удобно иметь прямо в учетной программе список дел с напоминаниями.
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = '''
Просто захотелось.
Подумалось, что очень удобно иметь возможность вести записи планов и сделаного прямо в проекте.
Может быть из этого выйдет что-то стоящее, а может нет.
'''
t.creator = 'Burcador'
todos.append(t)
t = TodoEntry()

t.task = 'Добавить /$DataPicker//$'
t.date_range = 'июн 2021'
t.description = '''
Сделать /$DataPicker//$ для ввода даты в форме ввода новых проводок.
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Первостепенно'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Валидация форм'
t.date_range = 'июн 2021'
t.description = '''
Сделать валидацию форм ввода новых счетов и новых проводок
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Первостепенно'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Доработать локальное меню'
t.date_range = 'июн 2021'
t.description = '''
Сделать возможным выводить в локальное меню справочников, журналов, отчетов нужные виды кнопок-действий.
Предварительно выделено такое меню в виде /$"includes&frasl;_nav_table.html"//$, в которое выводится кнопка с ссылкой.

Можно сделать по аналогии вывод нужных кнопок-ссылок для каждого вида отчетов
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Важно с точки зрения приведения этого вида функциональности к единообразию'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Доработать основное меню'
t.date_range = '03.06.2021'
t.description = '''
Сделать возможность добавлять пункты меню путем реактирования списка в отдельном py файле.

Вьюшка подтягивает этот список и передает в шаблон.
Шаблон разворачивает список в нужную структуру.

Наглядно, удобно, меньше дублей кода.
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = 'Весьма желательно, хотя не срочно'
t.creator = 'Burcador'
todos.append(t)
t = TodoEntry()

t.task = 'Доработать кнопку /$Отмена//$ она же /$Назад//$'
t.date_range = 'июн 2021'
t.description = '''
В некоторые отчеты или формы можно зайти с разных страниц.
Например, в карточку счета можно попасть из /%Плана счетов//% или из /%Просмотр счета//%.
Представляется удобным иметь кнопку, которая при отмене действия или при желании вернуть назад.
Возвращает именно на ту страницу с которой текущая была открыта.

Пока для форм создания новых счетов и проводок это не работает в полной мере.

Сделано через /$HTTP_REFERER//$, но если форма заполнена с ошибками.
То она возвращается django с комментарием, в результате /$HTTP_REFERER//$ становится пустым.
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = '''
Вроде бы можно пользоваться кнопкой /$Back//$ браузера.
Однако от учетной системы системы ожидаешь определенного поведения.
В частности всегда кнопка /$Отмена//$ действия существует.

Представляется разумным не настаивать на переобучении двигательных стереотипов пользователей.
А реализовывать то, что уже стало интуитивно-ожидаемым.
'''
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Сделать пагинацию'
t.date_range = 'июн 2021'
t.description = '''
В журналах и справочниках надо настроить пагинацию (постраничный вывод записей).
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Важно, в т.ч. с точки зрения выработки единообразного подхода, который будем использовать дальше.'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Сделать регистр проводок'
t.date_range = 'июн 2021'
t.description = '''
Из /%Журнала проводок//% можно получить движения по проводкам, но это требует ресурсоемкой обработки журнала.
При большом количестве движений по счету, текущий вариант карточки счета будет хорошо нагружать базу.
Регистр проводок эту задачу решает
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = '''
Важно, в т.ч. с точки зрения проработки самого механизма работы с регистрами.
При переходе к этапу-2 /%Операции//% у нас будет готовое решение
'''
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Перевести верстку с /$table//$ на /$div//$'
t.date_range = 'июн 2021'
t.description = '''
Сейчас справочники, журналы, отчеты сделаны табличной версткой.
Сематически это верно - эти данные и есть таблицы.

Но в будущем столкнемся с тем, что верстка не адаптивна к размерам экранов.
Например, с такими таблицами будет не удобно работать со смартфонов.
Перевод на верстку /$div//$ с классами /$flex//$ того же bootstrap это задачу решает
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Не срочно, но перспективно'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Доработать приложение /$Todo//$'
t.date_range = 'июн 2021'
t.description = '''
1) Замена списка списков /$TODOS//$ на список /$todos//$ экземпляров модели /$TodoEntry//$.

2) Перенос списка /$todos//$ из /$views//$ в отдельный файл /$todos_list.py//$.

3) Создание метода /$services.py/work_up_string//$, который обрабатывает /$plain-text//$:
- убирает пробелы вначале и конце;

- убирает символы перевода строки /$\\n//$ из начала строки;
- меняет символы перевода строки /$\\n//$ на html тег /$</br>//$

- меняет  символы /$&frasl;*//$ на /$<span class="strong">//$,
символы /$&frasl;&frasl;*//$ на /$</span>//$, для удобного выделения нужного жирным;
- меняет  символы /$&frasl;_//$ на /$<span class="incline">//$,
символы /$&frasl;&frasl;_//$ на /$</span>//$, для удобного выделения нужного курсивом;
- меняет  символы /$&frasl;%//$ на /$<span class="entity">//$,
символы /$&frasl;&frasl;*%//$ на /$</span>//$, для удобного выделения сущностей;
- меняет  символы /$&frasl;$//$ на /$<code>//$,
символы /$&frasl;&frasl;$//$ на /$</code>//$, для выделения кода;

- стили /$span.strong//$, /$span.incline//$ и /$span.entity//$ добавлены в /$balukaa.css//$

4) В /$TodoEntry//$ добавлены методы /$*_map(self)//$ , которые выдают обработанный /$services.py/work_up_string//$ текст:
- для каждого поля модели.

5) Переписан шаблон /$todos_journal.html//$
'''
t.status = TodoEntry.Statuses.DISABLE
t.comment = 'Повышение удобства'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = 'Разделить модели приложения /$Ledger//$'
t.date_range = 'июн 2021'
t.description = '''
Вместо одного общего файла /$views.py//$.
Создать файлы представлений по работе с каждым видом справочника, журнала, отчета.
Например: /$views_accounts_book.py, views_entries_journal.py, view_account_card_report.py//$ ...

Будет удобно поддерживать.

/*Кстати.//*
Может и /$templates/ledger//$ размести по своим подпапкам:
/$templates/ledger/account, templates/ledger/entry, templates/ledger/report//$.

Тогда можно упростить имена шаблонов и пользоваться так:
/$"ledger/account/book.html", "ledger/report/account_cart.html"//$
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Повышение удобства'
t.creator = '?'
todos.append(t)
t = TodoEntry()

t.task = '/*Техзадание этапа-2//* /%Операции//%'
t.date_range = 'июн 2021'
t.description = '''
Сам по себе /%Журнал проводок//% не полноценен.
Никто не будет вести учет отдельными проводками.
Учитывают отдельные хозяйственные операции, которые после проведения создают сразу несколько проводок.

Сейчас настраиваем работу с /%Журналом проводок//% как с полноценным журналом.
Потому что прорабатываем решения, которые потом будут легко настроены под работу с операциями.

В дальнейшем возможность прямого редактирования этого журнала будет закрыта.
'''
t.status = TodoEntry.Statuses.ENABLE
t.comment = 'Стратегическая цель, которая сделает приложение реально приспособленным для учета'
t.creator = 'Burcador'
todos.append(t)
t = TodoEntry()

# t.task = ''
# t.date_range = ''
# t.description = '''
#
# '''
# t.status = TodoEntry.Statuses.ENABLE
# t.comment = ''
# t.creator = '?'
# todos.append(t)
# t = TodoEntry()
