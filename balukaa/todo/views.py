from django.contrib.auth.mixins import LoginRequiredMixin
from django.views.generic import ListView
from .models import TodoEntry


TODOS = [
    ('июн 2021',
     'Техзадание этапа-2 "Операции"',
     'Сам по себе "Журнал проводок" не полноценен.</br>Никто не будет вести учет отдельными проводками.</br>Учитывают отдельные хозяйственные операции, которые после проведения создают сразу несколько проводок.</br></br>Сейчас настраиваем работу с "Журналом проводок" как с полноценным журналом, потому что прорабатываем решения, которые потом будут легко настроены под работу с операциями.</br>В дальнейшем возможность прямого редактирования этого журнала будет закрыта',
     TodoEntry.Statuses.ENABLE,
     'Стратегическая цель, которая сделает приложение реально приспособленным для учета',
     'Burcador'),

    ('июн 2021',
     'Перевести верстку с table на div',
     'Сейчас справочники, журналы, отчеты сделаны табличной версткой.</br>Сематически это верно - эти данные и есть таблицы.</br></br>Но в будущем столкнемся с тем, что верстка не адаптивна к размерам экранов.</br>Например, с такими таблицами будет не удобно работать со смартфонов.</br>Перевод на верстку div с классами flex того же bootstrap это задачу решает',
     TodoEntry.Statuses.ENABLE,
     'Не срочно, но перспективно',
     '?'),

    ('июн 2021',
     'Сделать регистр проводок',
     'Из "Журнала проводок" можно получить движения по проводкам, но это требует ресурсоемкой обработки журнала.</br>При большом количестве движений по счету, текущий вариант карточки счета будет хорошо нагружать базу.</br>Регистр проводок эту задачу решает',
     TodoEntry.Statuses.ENABLE,
     'Важно, в т.ч. с точки зрения проработки самого механизма работы с регистрами. При переходе к этапу-2 "Операции" у нас будет готовое решение',
     '?'),

    ('июн 2021',
     'Сделать пагинацию',
     'В журналах и справочниках надо настроить пагинацию (постраничный вывод записей)',
     TodoEntry.Statuses.ENABLE,
     'Важно, в т.ч. с точки зрения выработки единообразного подхода, который будем использовать дальше',
     '?'),

    ('июн 2021',
     'Доработать кнопку "Отмена"/"Назад"',
     'В некоторые отчеты или формы можно зайти с разных страниц.</br>Например, в карточку счета можно попасть из "Плана счетов" или из "Просмотр счета".</br>Представляется удобным иметь кнопку, которая при отмене действия или при желании вернуть назад, возвращает именно на ту страницу с которой текущая была открыта.</br>Пока для форм создания новых счетов и проводок это не работает в полной мере.</br></br>Сделано через HTTP_REFERER, но если форма заполнена с ошибками, то она возвращается django с комментарием, в результате HTTP_REFERER становится пустым',
     TodoEntry.Statuses.ENABLE,
     'Вроде бы можно пользоваться кнопкой "Back" браузера.</br>Однако от учетной системы системы ожидаешь определенного поведения.</br>В частности всегда кнопка "Отмена" действия существует.</br></br>Представляется разумным не настаивать на переобучении двигательных стереотипов пользователей, а реализовывать то, что уже стало интуитивно-ожидаемым',
     '?'),

    ('июн 2021',
     'Доработать локальное меню',
     'Сделать возможным выводить в локальное меню справочников, журналов, отчетов нужные виды кнопок-действий.</br>Предварительно выделено такое меню в виде "includes/_nav_table.html", в которое выводится кнопка с ссылкой.</br></br>Можно сделать по аналогии вывод нужных кнопок-ссылок для каждого вида отчетов',
     TodoEntry.Statuses.ENABLE,
     'Важно с точки зрения приведения этого вида функциональности к единообразию',
     '?'),

    ('июн 2021',
     'Доработать основное меню',
     'Сделать возможность добавлять пункты меню путем реактирования списка в отдельном py файле.</br>Вьюшка подтягивает этот список и передает в шаблон.</br>Шаблон разворачивает этот список в нужную структуру.</br></br>Тем самым убираем дублирование кода на каждый пункт списка',
     TodoEntry.Statuses.ENABLE,
     'Весьма желательно, хотя не срочно',
     '?'),

    ('июн 2021',
     'Добавить DataPicker',
     'Сделать DataPicker для ввода даты в форме ввода новых проводок',
     TodoEntry.Statuses.ENABLE,
     'Первостепенно',
     '?'),

    ('июн 2021',
     'Валидация форм',
     'Сделать валидацию форм ввода новых счетов и новых проводок',
     TodoEntry.Statuses.ENABLE,
     'Первостепенно',
     '?'),

    ('31.05.2021',
     'Экспериментальное приложение Todo',
     'Сделать приложение для удобного описания задач прямо в проекте (на замену задачам Redmine).</br></br>Задачи беруться из списка, который пока находится прямо во вьюшке приложения, а не из модели базы, поскольку рабочая база в отличии от файлов через github не передается.</br></br>Может быть потом сделаем иначе, например,</br> вариант-1: использовать рабочую базу данных через созданную модель, а данные при записи-изменении сериализовать в файл и настроить возможность загружать из файла;</br>вариант-2: настроить вторую базу данных sqlite, чисто для нужд разработки',
     TodoEntry.Statuses.DISABLE,
     'Просто захотелось.</br>Подумалось, что очень удобно иметь возможность вести записи планов и сделаного прямо в проекте.</br>Может быть из этого выйдет что-то стоящее, а может нет.',
     'Burcador'),

    ('май 2021',
     'Рефакторинг кода',
     'Рефакторинг кода всего проекта, приведение к единообразию: urls, models, views, templates.</br>Выработка единого стиля навигации, шаблонов.</br>Изменение приложения userapp на registration.</br>Выделение видов моделей: справочники (books), журналы (journals) и отчеты (reports).</br></br>Проработка полного цикла CRUD по "Плану счетов" и "Журналу проводок": создание, просмотр, изменение, удаление.</br>Добавлен отчет "Баланс"',
     TodoEntry.Statuses.DISABLE,
     'Изменений много, лучше удалить базу и миграции и запустить их заново.</br>Тесты не перерабатывал',
     'Burcador'),

    ('мар-апр 2021',
     'Приложение Ledger',
     'Созданы -</br>справочник: "План счетов";</br>журнал: "Журнал проводок";</br>отчеты: "Карточка счета", "Движение по журналу проводок";</br>заполнитель базы тестовыми данными;</br>тесты',
     TodoEntry.Statuses.DISABLE,
     '-',
     'Shaj'),

    ('янв-фев 2021',
     'Согласование, техзадание этапа 1',
     'Обсуждение целей проекта;</br>выбор технологии;</br>согласование техзадания 1 этапа;</br>выбор имени-образа проекта',
     TodoEntry.Statuses.DISABLE,
     '-',
     'Burcador, Shaj'),
]

class TodoJournalListView(LoginRequiredMixin, ListView):
    model = TodoEntry
    template_name = 'todo/todos_journal.html'
    # context_object_name = 'todos'

    def get_context_data(self, **kwargs):
        """ Переменные шаблона

        title =     title сайта; заголовок navbar content
        todos =     список задач, пока берется из обычного списка выше в этом файле
        btn_href =  ссылка для кнопки navbar content
        btn_text =  текст для кнопки navbar content
        """
        context = super().get_context_data(**kwargs)
        context['title'] = 'Список задач'
        context['todos'] = TODOS
        context['btn_text'] = 'Главная'
        context['btn_href'] = '\\'
        return context
